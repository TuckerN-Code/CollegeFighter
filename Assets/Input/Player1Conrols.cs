//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Player1Conrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player1Conrols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player1Conrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player1Conrols"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""0308067f-74fb-4f79-ba08-154a7b4a33db"",
            ""actions"": [
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3f3b776f-5624-4330-8f09-d4d71c11e422"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""a321be97-313e-4b50-bb8b-3591607a76e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardMove"",
                    ""type"": ""Button"",
                    ""id"": ""4e209b3f-2844-4d6e-a26b-50e420920358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackwardMove"",
                    ""type"": ""Button"",
                    ""id"": ""6cc1a54c-863f-4a63-ba6c-6ff73e0f7be1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpMove"",
                    ""type"": ""Button"",
                    ""id"": ""4f550683-a81a-4ebb-a586-085fc0fd7d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownMove"",
                    ""type"": ""Button"",
                    ""id"": ""9db3dcda-1c4c-4edc-8085-2642dc886687"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d981333-4aa3-4be9-ac16-2958c0115dc8"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab8734ca-a427-4dfa-9f26-9786136f6801"",
                    ""path"": ""<Keyboard>/#(J)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a00cee81-56de-49ff-b659-81abc7502a77"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eb1ef07-7663-4632-a11f-858f9b86f3ea"",
                    ""path"": ""<Keyboard>/#(I)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89e8296b-e87e-4483-aa5f-52887cba858c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""ForwardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a828e7-31ea-4b4b-8c73-6f7af96083e9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""BackwardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76c4ae0e-2e52-4904-8d06-8caef865b84f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""UpMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8ea6576-9c5d-47fe-93b0-764395a525fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Fightstick A Layout"",
                    ""action"": ""DownMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Fightstick A Layout"",
            ""bindingGroup"": ""Fightstick A Layout"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LightAttack = m_Default.FindAction("LightAttack", throwIfNotFound: true);
        m_Default_HeavyAttack = m_Default.FindAction("HeavyAttack", throwIfNotFound: true);
        m_Default_ForwardMove = m_Default.FindAction("ForwardMove", throwIfNotFound: true);
        m_Default_BackwardMove = m_Default.FindAction("BackwardMove", throwIfNotFound: true);
        m_Default_UpMove = m_Default.FindAction("UpMove", throwIfNotFound: true);
        m_Default_DownMove = m_Default.FindAction("DownMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_LightAttack;
    private readonly InputAction m_Default_HeavyAttack;
    private readonly InputAction m_Default_ForwardMove;
    private readonly InputAction m_Default_BackwardMove;
    private readonly InputAction m_Default_UpMove;
    private readonly InputAction m_Default_DownMove;
    public struct DefaultActions
    {
        private @Player1Conrols m_Wrapper;
        public DefaultActions(@Player1Conrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightAttack => m_Wrapper.m_Default_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_Default_HeavyAttack;
        public InputAction @ForwardMove => m_Wrapper.m_Default_ForwardMove;
        public InputAction @BackwardMove => m_Wrapper.m_Default_BackwardMove;
        public InputAction @UpMove => m_Wrapper.m_Default_UpMove;
        public InputAction @DownMove => m_Wrapper.m_Default_DownMove;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @LightAttack.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLightAttack;
                @HeavyAttack.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnHeavyAttack;
                @ForwardMove.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnForwardMove;
                @ForwardMove.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnForwardMove;
                @ForwardMove.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnForwardMove;
                @BackwardMove.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBackwardMove;
                @BackwardMove.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBackwardMove;
                @BackwardMove.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnBackwardMove;
                @UpMove.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpMove;
                @UpMove.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpMove;
                @UpMove.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnUpMove;
                @DownMove.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDownMove;
                @DownMove.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDownMove;
                @DownMove.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDownMove;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @HeavyAttack.started += instance.OnHeavyAttack;
                @HeavyAttack.performed += instance.OnHeavyAttack;
                @HeavyAttack.canceled += instance.OnHeavyAttack;
                @ForwardMove.started += instance.OnForwardMove;
                @ForwardMove.performed += instance.OnForwardMove;
                @ForwardMove.canceled += instance.OnForwardMove;
                @BackwardMove.started += instance.OnBackwardMove;
                @BackwardMove.performed += instance.OnBackwardMove;
                @BackwardMove.canceled += instance.OnBackwardMove;
                @UpMove.started += instance.OnUpMove;
                @UpMove.performed += instance.OnUpMove;
                @UpMove.canceled += instance.OnUpMove;
                @DownMove.started += instance.OnDownMove;
                @DownMove.performed += instance.OnDownMove;
                @DownMove.canceled += instance.OnDownMove;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_FightstickALayoutSchemeIndex = -1;
    public InputControlScheme FightstickALayoutScheme
    {
        get
        {
            if (m_FightstickALayoutSchemeIndex == -1) m_FightstickALayoutSchemeIndex = asset.FindControlSchemeIndex("Fightstick A Layout");
            return asset.controlSchemes[m_FightstickALayoutSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnForwardMove(InputAction.CallbackContext context);
        void OnBackwardMove(InputAction.CallbackContext context);
        void OnUpMove(InputAction.CallbackContext context);
        void OnDownMove(InputAction.CallbackContext context);
    }
}
